"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[84],{4084:(y,m,t)=>{t.r(m),t.d(m,{PluginsModule:()=>v});var a=t(9133),p=t(138),g=t(3126),d=t(9108),h=t(6395),u=t(1265),n=t(3668),c=t(9606),f=t(698),l=t(515),x=t(8167);const Z=[{path:"",component:(()=>{class e{constructor(i){this.elementRef=i,this.emojiMarkdown="# I :heart: ngx-markdown",this.katexMarkdown="#### `katex` directive example\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi) e^{2 \\pi i \\xi x} d\\xi\n```\n\n$f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi) e^{2 \\pi i \\xi x} d\\xi$"}ngOnInit(){this.setHeadings()}setHeadings(){const i=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(o=>i.push(o)),this.headings=i}}return e.\u0275fac=function(i){return new(i||e)(n.Y36(n.SBq))},e.\u0275cmp=n.Xpm({type:e,selectors:[["app-plugins"]],decls:70,vars:13,consts:[[3,"headings"],["id","emoji"],[3,"src"],["fxLayout","column","fxLayout.gt-sm","row","fxLayoutGap","16px"],["appearance","fill","color","accent","fxFlex.gt-sm","calc(50% - 8px)"],["matInput","",3,"ngModel","ngModelChange"],["emoji","","fxFlex.gt-sm","calc(50% - 8px)",3,"data"],["emoji",""],["id","line-numbers"],["lineNumbers",""],["lineNumbers","",3,"start"],["id","line-highlight"],["lineHighlight","",3,"line","lineOffset"],["id","katex"],["katex","","fxFlex.gt-sm","calc(50% - 8px)",3,"data"]],template:function(i,o){1&i&&(n.TgZ(0,"app-scrollspy-nav-layout",0),n.TgZ(1,"h1"),n._uU(2,"Plugins"),n.qZA(),n.TgZ(3,"section"),n.TgZ(4,"h2",1),n._uU(5,"Emoji plugin"),n.qZA(),n.TgZ(6,"markdown"),n._uU(7,"\n      #### Emoji-Toolkit file to include\n      ```javascript\n      node_modules/emoji-toolkit/lib/js/joypixels.min.js\n      ```\n      #### Directive\n      `emoji` - activate emoji plugin\n      ### Example\n    "),n.qZA(),n.TgZ(8,"markdown"),n._uU(9," Using `emoji` input property on `markdown` component or directive (this is not available when using pipe or service) allows you to convert shortnames to native unicode emojis. "),n.qZA(),n._UZ(10,"markdown",2),n.TgZ(11,"markdown"),n._uU(12," The example below illustrate `emoji` directive in action. "),n.qZA(),n.TgZ(13,"div",3),n.TgZ(14,"mat-form-field",4),n.TgZ(15,"textarea",5),n.NdJ("ngModelChange",function(r){return o.emojiMarkdown=r}),n.qZA(),n.qZA(),n._UZ(16,"markdown",6),n.qZA(),n.TgZ(17,"markdown",7),n._uU(18," > :blue_book: You can refer to this [Emoji Cheat Sheet](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md) for a complete list of _shortnames_. "),n.qZA(),n.qZA(),n.TgZ(19,"section"),n.TgZ(20,"h2",8),n._uU(21,"Line Numbers plugin"),n.qZA(),n.TgZ(22,"markdown"),n._uU(23,"\n      #### Prism files to include\n      ```javascript\n      node_modules/prismjs/plugins/line-numbers/prism-line-numbers.css\n      node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js\n      ```\n      #### Directive\n      `lineNumbers` - activate line numbers plugin\n      #### Attributes\n      `start` - offset number for the first display line\n      ### Example\n    "),n.qZA(),n.TgZ(24,"markdown"),n._uU(25," Using `lineNumbers` input property on `markdown` component or directive (this is not available when using pipe or service) allows you to add line number at the beginning of each lines of code block. "),n.qZA(),n._UZ(26,"markdown",2),n.TgZ(27,"markdown"),n._uU(28," The example below uses `lineNumbers` directive which uses default line offset of 1. "),n.qZA(),n.TgZ(29,"markdown",9),n._uU(30,"\n      ```javascript\n      var result = square(2);\n\n      function square(number) {\n        return number * number;\n      }\n      ```\n    "),n.qZA(),n.TgZ(31,"markdown"),n._uU(32," Optionally you can use `start` to specify the offset number for the first display line. "),n.qZA(),n.TgZ(33,"markdown"),n._uU(34," In the example below line offset is set to 5 using `start` input property. "),n.qZA(),n.TgZ(35,"markdown",10),n._uU(36,"\n      ```javascript\n      var result = root(2);\n\n      function root(x, n) {\n        try {\n          var negate = n % 2 == 1 && x < 0;\n          if(negate)\n            x = -x;\n          var possible = Math.pow(x, 1 / n);\n          n = Math.pow(possible, n);\n          if(Math.abs(x - n) < 1 && (x > 0 == n > 0))\n            return negate ? -possible : possible;\n        } catch(e){ }\n      }\n      ```\n    "),n.qZA(),n.qZA(),n.TgZ(37,"section"),n.TgZ(38,"h2",11),n._uU(39,"Line Highlight plugin"),n.qZA(),n.TgZ(40,"markdown"),n._uU(41,"\n      #### Prism files to include\n      ```javascript\n      node_modules/prismjs/plugins/line-highlight/prism-line-highlight.css\n      node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js\n      ```\n      #### Directive\n      `lineHighlight` - activate line highlight plugin\n      #### Attributes\n      `line` - lines to highlight (i.e.: 6, 11-15)"),n._UZ(42,"br"),n._uU(43,"\n      `lineOffset` - starting offset for line numbers\n      ### Example\n    "),n.qZA(),n.TgZ(44,"markdown"),n._uU(45,"\n      You can highlight different lines by adding `lineHighlight` directive on the `markdown` component/directive.\n\n      Use `line` input property to specify the line(s) to highlight and optionally there is a `lineOffset` property to specify the starting line of code your snippet represents.\n    "),n.qZA(),n._UZ(46,"markdown",2),n.TgZ(47,"markdown"),n._uU(48," In the example below `line` 6 and 10 to 16 are highlight using a `lineOffset` of 5. "),n.qZA(),n.TgZ(49,"markdown",12),n._uU(50,"\n      ```javascript\n      var result = root(2);\n\n      function root(x, n) {\n        try {\n          var negate = n % 2 == 1 && x < 0;\n          if(negate)\n            x = -x;\n          var possible = Math.pow(x, 1 / n);\n          n = Math.pow(possible, n);\n          if(Math.abs(x - n) < 1 && (x > 0 == n > 0))\n            return negate ? -possible : possible;\n        } catch(e){ }\n      }\n      ```\n    "),n.qZA(),n.qZA(),n.TgZ(51,"section"),n.TgZ(52,"h2",13),n._uU(53,"KaTeX plugin"),n.qZA(),n.TgZ(54,"markdown"),n._uU(55,"\n      #### KaTeX files to include\n      ```javascript\n      node_modules/katex/dist/katex.min.css\n      node_modules/katex/dist/katex.min.js\n      ```\n      #### Directive\n      `katex` - activate KaTeX plugin\n      #### Attributes\n      `katexOptions` - math rendering [options](https://katex.org/docs/options.html)"),n._UZ(56,"br"),n._uU(57,"\n      ### Example\n    "),n.qZA(),n.TgZ(58,"markdown"),n._uU(59," You can render KaTex expression by adding `katex` directive on the `markdown` component/directive. "),n.qZA(),n._UZ(60,"markdown",2),n.TgZ(61,"markdown"),n._uU(62," The example below illustrate `katex` directive in action. "),n.qZA(),n.TgZ(63,"div",3),n.TgZ(64,"mat-form-field",4),n.TgZ(65,"textarea",5),n.NdJ("ngModelChange",function(r){return o.katexMarkdown=r}),n.qZA(),n.qZA(),n._UZ(66,"markdown",14),n.qZA(),n.TgZ(67,"markdown"),n._uU(68,"\n      Optionally, you can specify math rendering [options](https://katex.org/docs/options.html) using `katexOptions` property.\n\n      **example.component.ts**\n      ```typescript\n      import { KatexOptions } from 'ngx-markdown';\n\n      public options: KatexOptions = {\n        displayMode: true,\n        throwOnError: false,\n        errorColor: '#cc0000',\n        ...\n      };\n      ```\n\n      **example.component.html**\n    "),n.qZA(),n._UZ(69,"markdown",2),n.qZA(),n.qZA()),2&i&&(n.Q6J("headings",o.headings),n.xp6(10),n.Q6J("src","app/plugins/remote/emoji.html"),n.xp6(5),n.Q6J("ngModel",o.emojiMarkdown),n.xp6(1),n.Q6J("data",o.emojiMarkdown),n.xp6(10),n.Q6J("src","app/plugins/remote/line-numbers.html"),n.xp6(9),n.Q6J("start",5),n.xp6(11),n.Q6J("src","app/plugins/remote/line-highlight.html"),n.xp6(3),n.Q6J("line","6, 10-16")("lineOffset",5),n.xp6(11),n.Q6J("src","app/plugins/remote/katex.html"),n.xp6(5),n.Q6J("ngModel",o.katexMarkdown),n.xp6(1),n.Q6J("data",o.katexMarkdown),n.xp6(3),n.Q6J("src","app/plugins/remote/katex-options.html"))},directives:[c.c,f.l,l.xw,l.SQ,x.KE,l.yH,p.Nt,a.Fj,a.JJ,a.On],styles:["[_nghost-%COMP%]{display:block}textarea[_ngcontent-%COMP%]{min-height:180px}"],changeDetection:0}),e})()}];let k=(()=>{class e{}return e.\u0275fac=function(i){return new(i||e)},e.\u0275mod=n.oAB({type:e}),e.\u0275inj=n.cJS({imports:[[u.Bz.forChild(Z)],u.Bz]}),e})();t(8249);let v=(()=>{class e{}return e.\u0275fac=function(i){return new(i||e)},e.\u0275mod=n.oAB({type:e}),e.\u0275inj=n.cJS({imports:[[a.u5,g.JP.forChild(),p.c,k,d.U,h.m]]}),e})()}}]);