import{a as H,b as N}from"./chunk-572EYJLG.js";import{a as T,b as j,c as R,d as O,f as A,g as q,h as G}from"./chunk-QIXYL4SG.js";import{a as P,b as B}from"./chunk-XJVX5M5X.js";import{$ as v,$b as C,Ga as n,H as c,L as M,La as s,M as h,Ma as g,Na as y,bb as b,ca as x,dc as S,ec as E,fa as m,fc as L,ga as u,lc as k,ma as a,nc as D,oc as U,pc as F,sa as i,ta as t,tc as I,ua as p,za as w}from"./chunk-YJGDTA2A.js";var _=(()=>{let e=class e{constructor(d,o){this.elementRef=d,this.rawLoaderService=o,this.demoPython$=this.rawLoaderService.get("app/bindings/remote/demo.py"),this.markdown='### Markdown example\n---\nThis is an **example** where we bind a variable to the `markdown` component that is also bound to a textarea.\n\n#### example.component.ts\n```typescript\npublic markdown = "# Markdown";\n```\n\n#### example.component.html\n```html\n<textarea [(ngModel)]="markdown"></textarea>\n<markdown [data]="markdown"></markdown>\n```',this.typescriptMarkdown=`import { Component } from '@angular/core';

@Component({
  selector: 'markdown-demo',
  templateUrl: './markdown-demo.component.html',
  styleUrls: ['./markdown-demo.component.scss'],
})
export class MarkdownDemoComponent {
  public pipeMarkdown = '# Markdown';
}`}ngOnInit(){this.setHeadings()}setHeadings(){let d=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(o=>d.push(o)),this.headings=d}};e.\u0275fac=function(o){return new(o||e)(u(x),u(H))},e.\u0275cmp=M({type:e,selectors:[["app-bindings"]],decls:47,vars:23,consts:[[3,"headings"],["id","remote-url"],[3,"src"],[3,"data"],["markdown","",3,"src"],["id","variable-binding"],["fxLayout","column","fxLayout.gt-sm","row","fxLayoutGap","16px"],["appearance","fill","color","accent","fxFlex.gt-sm","calc(50% - 8px)"],["matInput","",3,"ngModel","ngModelChange"],["fxFlex.gt-sm","calc(50% - 8px)",3,"data"],["id","pipe-usage"],["fxFlex.gt-sm","calc(50% - 8px)",3,"innerHTML"]],template:function(o,l){o&1&&(i(0,"app-scrollspy-nav-layout",0)(1,"h1"),n(2,"Bindings"),t(),i(3,"section")(4,"h2",1),n(5,"Remote Url"),t(),i(6,"markdown"),n(7," Using component with `src` property to fetch remote markdown file `app/bindings/remote/demo.md` "),t(),p(8,"markdown",2),i(9,"markdown"),n(10," Using component with static `python` code block "),t(),p(11,"markdown",3),s(12,"language"),s(13,"async"),i(14,"markdown"),n(15," Using directive with `src` property to fetch remote html file `app/bindings/remote/demo.html` "),t(),p(16,"div",4),i(17,"markdown"),n(18," Using directive with `src` property to fetch remote C++ file `app/bindings/remote/demo.cpp` "),t(),p(19,"div",4),t(),i(20,"section")(21,"h2",5),n(22,"Variable Binding"),t(),i(23,"markdown"),n(24," Using component or directive with `data` property allow to bind a variable that will update the DOM when value changes "),t(),i(25,"div",6)(26,"mat-form-field",7)(27,"textarea",8),w("ngModelChange",function(f){return l.markdown=f}),t()(),p(28,"markdown",9),t(),i(29,"markdown"),n(30," Using `language` pipe you can specify the language of the variable content for synthax highlights "),t(),p(31,"markdown",2),t(),i(32,"section")(33,"h2",10),n(34,"Pipe Usage"),t(),i(35,"markdown"),n(36," Using `markdown` pipe to transform markdown to HTML allow you to chain pipe transformations and will update the DOM when value changes. It is important to note that, because the `marked` parsing method returns a `Promise`, it requires the use of the `async` pipe. "),t(),p(37,"markdown",2),i(38,"markdown"),n(39," In the following example using the synthax above, `typescriptMarkdown` property does not contain any `back-ticks` to set the content language but will be chain with `language` pipe instead to specify synthax highlights language along with `markdown` pipe for conversion "),t(),i(40,"div",6)(41,"mat-form-field",7)(42,"textarea",8),w("ngModelChange",function(f){return l.typescriptMarkdown=f}),t()(),p(43,"div",11),s(44,"async"),s(45,"markdown"),s(46,"language"),t()()()),o&2&&(a("headings",l.headings),m(8),a("src","app/bindings/remote/demo.md"),m(3),a("data",y(12,11,g(13,14,l.demoPython$),"python")),m(5),a("src","app/bindings/remote/demo.html"),m(3),a("src","app/bindings/remote/demo.cpp"),m(8),a("ngModel",l.markdown),m(1),a("data",l.markdown),m(3),a("src","app/bindings/remote/language-pipe.html"),m(6),a("src","app/bindings/remote/markdown-pipe.html"),m(5),a("ngModel",l.typescriptMarkdown),m(1),a("innerHTML",g(44,16,g(45,18,y(46,20,l.typescriptMarkdown,"typescript"))),v))},dependencies:[T,j,R,S,q,A,P,D,U,F,C,E,b],styles:["[_nghost-%COMP%]{display:block}textarea[_ngcontent-%COMP%]{min-height:360px}"],changeDetection:0});let r=e;return r})();var J=[{path:"",component:_}],$=(()=>{let e=class e{};e.\u0275fac=function(o){return new(o||e)},e.\u0275mod=h({type:e}),e.\u0275inj=c({imports:[k.forChild(J),k]});let r=e;return r})();var we=(()=>{let e=class e{};e.\u0275fac=function(o){return new(o||e)},e.\u0275mod=h({type:e}),e.\u0275inj=c({imports:[$,O,N,L.forChild(),G,B,I]});let r=e;return r})();export{we as BindingsModule};
