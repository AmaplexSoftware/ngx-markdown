import{a as j,b as H}from"./chunk-XJVX5M5X.js";import{$ as y,$b as b,Ga as r,H as s,L as f,La as m,M as p,Ma as c,Na as k,bb as v,ca as w,dc as M,ec as S,fa as d,fc as E,ga as x,lc as g,ma as l,sa as o,ta as n,tc as C,ua as h}from"./chunk-YJGDTA2A.js";var P=(()=>{let e=class e{constructor(a){this.elementRef=a,this.myValue="print('hello-world')"}ngOnInit(){this.setHeadings()}setHeadings(){let a=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(i=>a.push(i)),this.headings=a}};e.\u0275fac=function(i){return new(i||e)(x(w))},e.\u0275cmp=f({type:e,selectors:[["app-syntax-highlight"]],decls:25,vars:10,consts:[[3,"headings"],["id","getting-started"],["id","auto-detect"],[3,"src"],["id","interpolation"],["emoji",""],["id","language-pipe"],[3,"innerHTML"]],template:function(i,u){i&1&&(o(0,"app-scrollspy-nav-layout",0)(1,"h1",1),r(2,"Syntax Highlight"),n(),o(3,"section")(4,"h2",2),r(5,"Auto-Detect"),n(),o(6,"markdown"),r(7,`
      When using the \`src\` input property to load file remotely, language for syntax highlight will be auto-detected based on the loaded file extension.

      The following example...

      \`\`\`html
      <markdown [src]="'app/syntax-highlight/remote/for-loop.js'"></markdown>
      \`\`\`

      Would render with Javascript syntax highlight based on the \`js\` file extension.
    `),n(),h(8,"markdown",3),n(),o(9,"section")(10,"h2",4),r(11,"Interpolation"),n(),o(12,"markdown",5),r(13,"\n      > :bulb: Using interpolation requires the uses of `ngPreserveWhitespaces` to keep indentation and spaces untouched during compilation.\n\n      When using [interpolation](https://angular.io/guide/template-syntax#interpolation-), the language for code block must be specified after the first three backticks.\n\n      ````html\n      <markdown ngPreserveWhitespaces>\n        ```typescript\n        export function greetings(name: string): string &#123;\n          return 'Hello ' + name;\n        }\n        ```\n      </markdown>\n      ````\n      ##### _* Characters such as `<, >, {, }` directly written in the HTML template file must be escaped so that the compiler doesn't try to bind it as regular Angular code_.\n\n      Would render with TypeScript syntax highlight based on the specified `typescript` language.\n    "),n(),o(14,"markdown"),r(15,"\n      ```typescript\n      export function greetings(name: string): string {\n        return 'Hello ' + name;\n      }\n      ```\n    "),n()(),o(16,"section")(17,"h2",6),r(18,"Language Pipe"),n(),o(19,"markdown"),r(20,"\n      When using the `markdown` pipe, you can specify the syntax highlight language by chaining the `language` pipe.\n\n      For example, having the python code `print('hello world')` into the `myValue` variable could be parsed specifying the language as follow...\n\n      ````\n      ```html\n      <div [innerHTML]=\"myValue | language : 'python' | markdown | async\"><div>\n      ```\n      ````\n\n      Would render with Python syntax highlight as specified with the `language` pipe in front of the `markdown` pipe.\n    "),n(),h(21,"div",7),m(22,"async"),m(23,"markdown"),m(24,"language"),n()()),i&2&&(l("headings",u.headings),d(8),l("src","app/syntax-highlight/remote/for-loop.js"),d(13),l("innerHTML",c(22,3,c(23,5,k(24,7,u.myValue,"python"))),y))},dependencies:[M,j,b,S,v],styles:["[_nghost-%COMP%]{display:block}"],changeDetection:0});let t=e;return t})();var T=[{path:"",component:P}],W=(()=>{let e=class e{};e.\u0275fac=function(i){return new(i||e)},e.\u0275mod=p({type:e}),e.\u0275inj=s({imports:[g.forChild(T),g]});let t=e;return t})();var Q=(()=>{let e=class e{};e.\u0275fac=function(i){return new(i||e)},e.\u0275mod=p({type:e}),e.\u0275inj=s({imports:[E.forChild(),H,C,W]});let t=e;return t})();export{Q as SyntaxHighlightModule};
