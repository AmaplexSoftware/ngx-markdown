(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"5xhF":function(n,e,t){"use strict";t.r(e),t.d(e,"PluginsModule",function(){return g});var i=t("3Pt+"),o=t("qFsG"),a=t("ZVb+"),s=t("kUWE"),r=t("mqvi"),l=t("tyNb"),c=t("fXoL"),b=t("meC2"),p=t("ZJmW"),m=t("XiUz"),u=t("kmnG");const d=[{path:"",component:(()=>{class n{constructor(n){this.elementRef=n,this.emojiMarkdown="# I :heart: ngx-markdown",this.katexMarkdown="#### `katex` directive example\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi) e^{2 \\pi i \\xi x} d\\xi\n```\n\n$f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi) e^{2 \\pi i \\xi x} d\\xi$"}ngOnInit(){this.setHeadings()}setHeadings(){const n=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(e=>n.push(e)),this.headings=n}}return n.\u0275fac=function(e){return new(e||n)(c.Jb(c.l))},n.\u0275cmp=c.Db({type:n,selectors:[["app-plugins"]],decls:70,vars:13,consts:[[3,"headings"],["id","emoji"],[3,"src"],["fxLayout","column","fxLayout.gt-sm","row","fxLayoutGap","16px"],["appearance","fill","color","accent","fxFlex.gt-sm","calc(50% - 8px)"],["matInput","",3,"ngModel","ngModelChange"],["emoji","","fxFlex.gt-sm","calc(50% - 8px)",3,"data"],["emoji",""],["id","line-numbers"],["lineNumbers",""],["lineNumbers","",3,"start"],["id","line-highlight"],["lineHighlight","",3,"line","lineOffset"],["id","katex"],["katex","","fxFlex.gt-sm","calc(50% - 8px)",3,"data"]],template:function(n,e){1&n&&(c.Ob(0,"app-scrollspy-nav-layout",0),c.Ob(1,"h1"),c.uc(2,"Plugins"),c.Nb(),c.Ob(3,"section"),c.Ob(4,"h2",1),c.uc(5,"Emoji plugin"),c.Nb(),c.Ob(6,"markdown"),c.uc(7,"\n      #### Emoji-Toolkit file to include\n      ```javascript\n      node_modules/emoji-toolkit/lib/js/joypixels.min.js\n      ```\n      #### Directive\n      `emoji` - activate emoji plugin\n      ### Example\n    "),c.Nb(),c.Ob(8,"markdown"),c.uc(9," Using `emoji` input property on `markdown` component or directive (this is not available when using pipe or service) allows you to convert shortnames to native unicode emojis. "),c.Nb(),c.Kb(10,"markdown",2),c.Ob(11,"markdown"),c.uc(12," The example below illustrate `emoji` directive in action. "),c.Nb(),c.Ob(13,"div",3),c.Ob(14,"mat-form-field",4),c.Ob(15,"textarea",5),c.Wb("ngModelChange",function(n){return e.emojiMarkdown=n}),c.Nb(),c.Nb(),c.Kb(16,"markdown",6),c.Nb(),c.Ob(17,"markdown",7),c.uc(18," > :blue_book: You can refer to this [Emoji Cheat Sheet](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md) for a complete list of _shortnames_. "),c.Nb(),c.Nb(),c.Ob(19,"section"),c.Ob(20,"h2",8),c.uc(21,"Line Numbers plugin"),c.Nb(),c.Ob(22,"markdown"),c.uc(23,"\n      #### Prism files to include\n      ```javascript\n      node_modules/prismjs/plugins/line-numbers/prism-line-numbers.css\n      node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js\n      ```\n      #### Directive\n      `lineNumbers` - activate line numbers plugin\n      #### Attributes\n      `start` - offset number for the first display line\n      ### Example\n    "),c.Nb(),c.Ob(24,"markdown"),c.uc(25," Using `lineNumbers` input property on `markdown` component or directive (this is not available when using pipe or service) allows you to add line number at the beginning of each lines of code block. "),c.Nb(),c.Kb(26,"markdown",2),c.Ob(27,"markdown"),c.uc(28," The example below uses `lineNumbers` directive which uses default line offset of 1. "),c.Nb(),c.Ob(29,"markdown",9),c.uc(30,"\n      ```javascript\n      var result = square(2);\n\n      function square(number) {\n        return number * number;\n      }\n      ```\n    "),c.Nb(),c.Ob(31,"markdown"),c.uc(32," Optionally you can use `start` to specify the offset number for the first display line. "),c.Nb(),c.Ob(33,"markdown"),c.uc(34," In the example below line offset is set to 5 using `start` input property. "),c.Nb(),c.Ob(35,"markdown",10),c.uc(36,"\n      ```javascript\n      var result = root(2);\n\n      function root(x, n) {\n        try {\n          var negate = n % 2 == 1 && x < 0;\n          if(negate)\n            x = -x;\n          var possible = Math.pow(x, 1 / n);\n          n = Math.pow(possible, n);\n          if(Math.abs(x - n) < 1 && (x > 0 == n > 0))\n            return negate ? -possible : possible;\n        } catch(e){ }\n      }\n      ```\n    "),c.Nb(),c.Nb(),c.Ob(37,"section"),c.Ob(38,"h2",11),c.uc(39,"Line Highlight plugin"),c.Nb(),c.Ob(40,"markdown"),c.uc(41,"\n      #### Prism files to include\n      ```javascript\n      node_modules/prismjs/plugins/line-highlight/prism-line-highlight.css\n      node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js\n      ```\n      #### Directive\n      `lineHighlight` - activate line highlight plugin\n      #### Attributes\n      `line` - lines to highlight (i.e.: 6, 11-15)"),c.Kb(42,"br"),c.uc(43,"\n      `lineOffset` - starting offset for line numbers\n      ### Example\n    "),c.Nb(),c.Ob(44,"markdown"),c.uc(45,"\n      You can highlight different lines by adding `lineHighlight` directive on the `markdown` component/directive.\n\n      Use `line` input property to specify the line(s) to highlight and optionally there is a `lineOffset` property to specify the starting line of code your snippet represents.\n    "),c.Nb(),c.Kb(46,"markdown",2),c.Ob(47,"markdown"),c.uc(48," In the example below `line` 6 and 10 to 16 are highlight using a `lineOffset` of 5. "),c.Nb(),c.Ob(49,"markdown",12),c.uc(50,"\n      ```javascript\n      var result = root(2);\n\n      function root(x, n) {\n        try {\n          var negate = n % 2 == 1 && x < 0;\n          if(negate)\n            x = -x;\n          var possible = Math.pow(x, 1 / n);\n          n = Math.pow(possible, n);\n          if(Math.abs(x - n) < 1 && (x > 0 == n > 0))\n            return negate ? -possible : possible;\n        } catch(e){ }\n      }\n      ```\n    "),c.Nb(),c.Nb(),c.Ob(51,"section"),c.Ob(52,"h2",13),c.uc(53,"KaTeX plugin"),c.Nb(),c.Ob(54,"markdown"),c.uc(55,"\n      #### KaTeX files to include\n      ```javascript\n      node_modules/katex/dist/katex.min.css\n      node_modules/katex/dist/katex.min.js\n      ```\n      #### Directive\n      `katex` - activate KaTeX plugin\n      #### Attributes\n      `katexOptions` - math rendering [options](https://katex.org/docs/options.html)"),c.Kb(56,"br"),c.uc(57,"\n      ### Example\n    "),c.Nb(),c.Ob(58,"markdown"),c.uc(59," You can render KaTex expression by adding `katex` directive on the `markdown` component/directive. "),c.Nb(),c.Kb(60,"markdown",2),c.Ob(61,"markdown"),c.uc(62," The example below illustrate `katex` directive in action. "),c.Nb(),c.Ob(63,"div",3),c.Ob(64,"mat-form-field",4),c.Ob(65,"textarea",5),c.Wb("ngModelChange",function(n){return e.katexMarkdown=n}),c.Nb(),c.Nb(),c.Kb(66,"markdown",14),c.Nb(),c.Ob(67,"markdown"),c.uc(68,"\n      Optionally, you can specify math rendering [options](https://katex.org/docs/options.html) using `katexOptions` property.\n\n      **example.component.ts**\n      ```typescript\n      import { KatexOptions } from 'ngx-markdown';\n\n      public options: KatexOptions = {\n        displayMode: true,\n        throwOnError: false,\n        errorColor: '#cc0000',\n        ...\n      };\n      ```\n\n      **example.component.html**\n    "),c.Nb(),c.Kb(69,"markdown",2),c.Nb(),c.Nb()),2&n&&(c.ec("headings",e.headings),c.zb(10),c.ec("src","app/plugins/remote/emoji.html"),c.zb(5),c.ec("ngModel",e.emojiMarkdown),c.zb(1),c.ec("data",e.emojiMarkdown),c.zb(10),c.ec("src","app/plugins/remote/line-numbers.html"),c.zb(9),c.ec("start",5),c.zb(11),c.ec("src","app/plugins/remote/line-highlight.html"),c.zb(3),c.ec("line","6, 10-16")("lineOffset",5),c.zb(11),c.ec("src","app/plugins/remote/katex.html"),c.zb(5),c.ec("ngModel",e.katexMarkdown),c.zb(1),c.ec("data",e.katexMarkdown),c.zb(3),c.ec("src","app/plugins/remote/katex-options.html"))},directives:[b.a,p.a,m.d,m.e,u.b,m.b,o.a,i.a,i.e,i.g],styles:["[_nghost-%COMP%]{display:block}textarea[_ngcontent-%COMP%]{min-height:180px}"],changeDetection:0}),n})()}];let h=(()=>{class n{}return n.\u0275mod=c.Hb({type:n}),n.\u0275inj=c.Gb({factory:function(e){return new(e||n)},imports:[[l.e.forChild(d)],l.e]}),n})();t("WE6N");let g=(()=>{class n{}return n.\u0275mod=c.Hb({type:n}),n.\u0275inj=c.Gb({factory:function(e){return new(e||n)},imports:[[i.c,a.a.forChild(),o.b,h,s.a,r.a]]}),n})()}}]);